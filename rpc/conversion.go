// Code generated by doc-generator. DO NOT EDIT.
package rpc

import (
	"time"

	doc "github.com/navigacontentlab/navigadoc/doc"
	"google.golang.org/protobuf/types/known/timestamppb"
)

func (d *Document) FromDocDocument(doc *doc.Document) error {
	d.Uuid = doc.UUID
	d.Type = doc.Type
	d.Uri = doc.URI
	d.Url = doc.URL
	d.Title = doc.Title
	d.Path = doc.Path
	d.Products = doc.Products
	d.Created = fromDocTime(doc.Created)
	d.Modified = fromDocTime(doc.Modified)
	d.Published = fromDocTime(doc.Published)
	d.Content = fromDocBlocks(doc.Content)
	d.Meta = fromDocBlocks(doc.Meta)
	d.Links = fromDocBlocks(doc.Links)
	d.Properties = fromDocProperties(doc.Properties)
	d.Source = doc.Source
	d.Language = doc.Language
	d.Status = doc.Status
	d.Unpublished = fromDocTime(doc.Unpublished)
	d.Provider = doc.Provider
	return nil
}
func (d *Property) FromDocProperty(doc *doc.Property) error {
	d.Name = doc.Name
	d.Value = doc.Value
	d.Parameters = doc.Parameters
	return nil
}
func (d *Block) FromDocBlock(doc *doc.Block) error {
	d.Id = doc.ID
	d.Uuid = doc.UUID
	d.Uri = doc.URI
	d.Url = doc.URL
	d.Type = doc.Type
	d.Title = doc.Title
	d.Data = doc.Data
	d.Rel = doc.Rel
	d.Name = doc.Name
	d.Value = doc.Value
	d.ContentType = doc.ContentType
	d.Links = fromDocBlocks(doc.Links)
	d.Content = fromDocBlocks(doc.Content)
	d.Meta = fromDocBlocks(doc.Meta)
	d.Role = doc.Role
	return nil
}
func (d *Document) ToDocDocument(doc *doc.Document) error {
	doc.UUID = d.Uuid
	doc.Type = d.Type
	doc.URI = d.Uri
	doc.URL = d.Url
	doc.Title = d.Title
	doc.Path = d.Path
	doc.Products = d.Products
	doc.Created = toDocTime(d.Created)
	doc.Modified = toDocTime(d.Modified)
	doc.Published = toDocTime(d.Published)
	doc.Content = toDocBlocks(d.Content)
	doc.Meta = toDocBlocks(d.Meta)
	doc.Links = toDocBlocks(d.Links)
	doc.Properties = toDocProperties(d.Properties)
	doc.Source = d.Source
	doc.Language = d.Language
	doc.Status = d.Status
	doc.Unpublished = toDocTime(d.Unpublished)
	doc.Provider = d.Provider
	return nil
}
func (d *Property) ToDocProperty(doc *doc.Property) error {
	doc.Name = d.Name
	doc.Value = d.Value
	doc.Parameters = d.Parameters
	return nil
}
func (d *Block) ToDocBlock(doc *doc.Block) error {
	doc.ID = d.Id
	doc.UUID = d.Uuid
	doc.URI = d.Uri
	doc.URL = d.Url
	doc.Type = d.Type
	doc.Title = d.Title
	doc.Data = d.Data
	doc.Rel = d.Rel
	doc.Name = d.Name
	doc.Value = d.Value
	doc.ContentType = d.ContentType
	doc.Links = toDocBlocks(d.Links)
	doc.Content = toDocBlocks(d.Content)
	doc.Meta = toDocBlocks(d.Meta)
	doc.Role = d.Role
	return nil
}

func fromDocBlocks(blocks []doc.Block) []*Block {
	var rpcBlocks []*Block
	for _, b := range blocks {
		rpcBlock := Block{}
		rpcBlock.FromDocBlock(&b)
		rpcBlocks = append(rpcBlocks, &rpcBlock)
	}
	return rpcBlocks
}

func toDocBlocks(blocks []*Block) []doc.Block {
	var docBlocks []doc.Block
	for _, b := range blocks {
		docBlock := doc.Block{}
		b.ToDocBlock(&docBlock)
		docBlocks = append(docBlocks, docBlock)
	}
	return docBlocks
}

func fromDocProperties(properties []doc.Property) []*Property {
	var rpcProperties []*Property
	for _, p := range properties {
		rpcProp := Property{}
		rpcProp.FromDocProperty(&p)
		rpcProperties = append(rpcProperties, &rpcProp)
	}
	return rpcProperties
}

func toDocProperties(properties []*Property) []doc.Property {
	var docProperties []doc.Property
	for _, p := range properties {
		docProp := doc.Property{}
		p.ToDocProperty(&docProp)
		docProperties = append(docProperties, docProp)
	}
	return docProperties
}

func fromDocTime(ts *time.Time) *timestamppb.Timestamp {
	if ts != nil {
		time := timestamppb.New(*ts)
		return time
	}
	return nil
}

func toDocTime(ts *timestamppb.Timestamp) *time.Time {
	if ts != nil {
		time := ts.AsTime()
		return &time
	}
	return nil
}
