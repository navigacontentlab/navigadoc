syntax = "proto3";

package naviga;

import "google/protobuf/timestamp.proto";

option go_package ="github.com/navigacontentlab/navigadoc/rpc";


// Document is the content, doh!
message Document {
  // UUID is a unique ID for the document, this can be a random v4
  // UUID, or a URI-derived v5 UUID.
  string uuid = 1;
  // Type is the content type of the document.
  string type = 3;
  // URI identifies the document (in a more human-readable way than
  // the UUID)
  string uri = 4;
  // URL is the browseable location of the document (if any)
  string url = 5;
  // Title is the title of the document, often used as the headline
  // when the document is displayed.
  string title = 6;
  // Path is the path on which the document can be exposed when
  // consumed through a website.
  string path = 8;
  // Products is a list of products that the document should be used
  // in.
  repeated string products = 9 [deprecated=true];
  // Created is the initial creation time of the document.
  google.protobuf.Timestamp created = 10;
  // Modified is the modified time as is should be presented to end
  // users, the actual modified timestamp is recorded in the document
  // commit. There is probably no reason not to update this timestamp
  // when doing manual edits.  Automated tools and systems should
  // probably leave it alone tho.
  google.protobuf.Timestamp modified = 11;
  // Published is the published timestamp as it should be presented to
  // end users. The actual published timestamp is recorded in the
  // document commits in the "usable" branch. This shouldn't be
  // touched after the initial publishing of the document.
  google.protobuf.Timestamp published = 12;
  // Content is the content of the documen, this is essentially what
  // gets rendered on the page when you view a document.
  repeated Block content = 13;
  // Meta is the metadata for a document, this could be stuff like
  // open graph tags and content profile information.
  repeated Block meta = 14;
  // Links are links to other resources and entities. This could be
  // links to categories and subject for the document, or authors.
  repeated Block links = 15;
  // Properties are header-like properties for a document. This is
  // mainly used as a bucket for document-level stuff that needs to be
  // preserved when converting to and from other document formats.
  repeated Property properties = 16;
  // Source is the name of the source of the document, usually the
  // name of the application that generated it (or allowed a user to
  // generate it).
  string source = 17;
  // Language is the language used in the document as an IETF language
  // tag. F.ex. "en", "en-UK", "es", or "sv-SE".
  string language = 18;
  // A free form field detailing the status for the document, for example:
  // "draft" or "withheld".
  string status = 19;
  google.protobuf.Timestamp unpublished = 20;
  string provider = 21;
  // string infoSource = 22;
}

// Property is a key-value pair
message Property {
  string name = 1;
  string value = 2;
  map<string, string> parameters = 3;
}

// Block is the building block for data embedded in documents. It is
// used for both content, links and metadata. Blocks have can be
// nested, but that's nothing to strive for, keep it simple.
message Block {
  reserved 12;

  // ID is the block ID
  string id = 1;
  // UUID is used to reference another Document in a block.
  string uuid = 2;
  // URI is used to reference another entity in a document.
  string uri = 3;
  // URL is a browseable URL for the the block.
  string url = 4;
  // Type is the type of the block
  string type = 5;
  // Title is the title/headline of the block, typically used in the
  // presentation of the block.
  string title = 6;
  // Data contains block data
  map<string, string> data = 7;
  // Relationship describes the relationship to the document/parent
  // entity
  string rel = 8;
  // Name is a name for the block. An alternative to "rel" when
  // relationship is a term that doesn't fit.
  string name = 9;
  // Value is a value for the block. Useful when we want to store a
  // primitive value.
  string value = 10;
  // ContentType is used to describe the content type of the
  // block/linked entity if it differs from the type of the block.
  string contentType = 11;
  // Links are used to link to other resources and documents.
  repeated Block links = 13;
  // Content is used to embed content blocks.
  repeated Block content = 14;
  // Meta is used to embed metadata
  repeated Block meta = 15;
  // Role is used for
  string role = 16;
}
